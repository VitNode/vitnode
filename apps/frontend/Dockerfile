FROM node:20-alpine AS base
RUN npm i -g pnpm@9.5.0

FROM base AS builder
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
RUN apk update
# Set working directory
WORKDIR /app
RUN npm i -g turbo@~2.0.6
COPY . .
RUN turbo telemetry disable
RUN turbo prune frontend --docker

# Add lockfile and package.json's of isolated subworkspace
FROM base AS installer
RUN apk add --no-cache libc6-compat
RUN apk update
WORKDIR /app

# First install the dependencies (as they change less often)
COPY .gitignore .gitignore
COPY --from=builder /app/out/json/ .
RUN pnpm i

# Build the project
COPY --from=builder /app/out/full/ .
COPY turbo.json turbo.json
COPY .prettierrc .prettierrc

ARG NEXT_PUBLIC_BACKEND_URL
ENV NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
ARG NEXT_PUBLIC_FRONTEND_URL
ENV NEXT_PUBLIC_FRONTEND_URL=${NEXT_PUBLIC_FRONTEND_URL}
ENV NEXT_TELEMETRY_DISABLED 1

RUN pnpm turbo build --filter=frontend...

FROM base AS runner
WORKDIR /app

# # Don't run production as root
# RUN addgroup --system --gid 1001 nodejs
# RUN adduser --system --uid 1001 nextjs
# USER nextjs

# COPY --from=installer /app/frontend/next.config.js .
# COPY --from=installer /app/frontend/package.json .

# # Automatically leverage output traces to reduce image size
# # https://nextjs.org/docs/advanced-features/output-file-tracing
# COPY --from=installer --chown=nextjs:nodejs /app/frontend/.next/standalone ./
# COPY --from=installer --chown=nextjs:nodejs /app/frontend/.next/static ./frontend/.next/static

COPY --from=installer /app/frontend/.next/standalone ./
COPY --from=installer /app/frontend/.next/static ./frontend/.next/static

EXPOSE 3000
ENV PORT 3000
ENV HOSTNAME "0.0.0.0"
